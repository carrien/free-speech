function [expt] = run_measureDuration_audapter(expt,fbMode)
% Template for altered feedback studies. Based on FUSP template but changed
% to work with Audapter.
%
% Very similar to run_timeAdapt_audapter but used to get a baseline measure of how long people's VOT and other consonant
% closure measures are (could easily be adapted for vowels, etc.) 
% 
% This will create: 
% --- data.mat with 10 pre trials in it
% --- expt file (not really necessary, but why not)
% --- audioGUI trial file for each pre trial
%
% Steps:
% 1. Record 10 trials, save resulting data.mat under car/pre (e.g.)
% 2. Generate trials audio files using OST events for user_event_times
% 3. Open audioGUI for each trial, showing user events; adjust user events and save
% (If the OST failed, it will have to be generated by the experimenter) 
% 4. find mean, max ue2-ue1
% 5. adjust to buffer?
% 
% This will return: 
% --- the mean and/or max value of the relevant measure? 

dbstop if error

if nargin < 1, expt = []; end
if nargin < 2 || isempty(fbMode); fbMode = 3;end % feedback + noise

% Set up stimWord early to be able to generate the right save paths (different directory for every condition) 
stimWord = expt.words{(expt.session - 1)*expt.nRounds + expt.round}; % 2 is just the number of rounds
expt.allWords = ((expt.session - 1)*2 + expt.round) * ones(1,expt.ntrials); 
expt.listWords = expt.words(expt.allWords); 

if isfield(expt,'dataPath')
    outputdir = fullfile(expt.dataPath,stimWord,'pre');
else
    warning('Setting output directory to current directory: %s\n',pwd);
    outputdir = pwd;
end

% assign folder for saving trial data
% create output directory if it doesn't exist
trialdirname = 'temp_trials';
trialdir = fullfile(outputdir,trialdirname);
if ~exist(trialdir,'dir')
    mkdir(outputdir,trialdirname)
end

save([outputdir '\expt.mat'],'expt');
%set RMS threshold for deciding if a trial is good or not
rmsThresh = 0.04;

%% set up stimuli
% set experiment-specific fields (or pass them in as 'expt')
stimtxtsize = 200;

% set missing expt fields to defaults
expt = set_exptDefaults(expt);

%% Set up files for time warping

% OST/PCF files.  TODO: set up way in baseline interface to use ostEdit to change parameters based on participant if
% necessary  (might find that this is totally unnecessary; will probably be able to tell after pilots)

% Set up references to master and working pcf/ost files
% temp fix for exiting ost/pcf files: 

if strcmp(stimWord,'gap') || strcmp(stimWord,'gar') || strcmp(stimWord,'god')
    dummyWord = 'ada';
elseif strcmp(stimWord,'cap') || strcmp(stimWord,'car') || strcmp(stimWord,'cod')
    dummyWord = 'ata';
elseif strcmp(stimWord,'zap') || strcmp(stimWord,'czar') || strcmp(stimWord,'Z')
    dummyWord = 'aza';
elseif strcmp(stimWord,'sap') || strcmp(stimWord,'saw') || strcmp(stimWord,'sea') || strcmp(stimWord,'C')
    dummyWord = 'asa';
else
    error(['Your word (' stimWord ') doesn''t match our records.']) 
end

expt.dummyWord = dummyWord; 

ostMaster = ['C:\Users\Public\Documents\software\current-studies\timeAdapt\' dummyWord 'Master.ost'];
pcfMaster = ['C:\Users\Public\Documents\software\current-studies\timeAdapt\' dummyWord 'Master.pcf'];
ostWorking = ['C:\Users\Public\Documents\software\current-studies\timeAdapt\' dummyWord 'Working.ost'];
pcfWorking = ['C:\Users\Public\Documents\software\current-studies\timeAdapt\' dummyWord 'Working.pcf'];

ostFN = ostWorking;
pcfFN = pcfWorking;
% Make sure the working files actually exist. This might be a little overly verbose
if ~exist(ostFN, 'file'), copyfile(ostMaster, ostWorking); end %isfile(ostFN),
if ~exist(pcfFN, 'file'), copyfile(pcfMaster, pcfWorking); end %isfile(pcfFN)

% Not sure what the point of these are if I've already done an ifexists... 
check_file(ostFN);
check_file(pcfFN);
Audapter('ost', ostFN, 0);
Audapter('pcf', pcfFN, 0);

%% set up audapter
audioInterfaceName = 'Focusrite USB'; %SMNG default for Windows 10
sRate = 48000;  % Hardware sampling rate (before downsampling)
downFact = 2;
frameLen = 96/downFact;  % Before downsampling

Audapter('deviceName', audioInterfaceName);
Audapter('setParam', 'sRate', sRate / downFact, 0);
Audapter('setParam', 'downFact', downFact, 0);
Audapter('setParam', 'frameLen', frameLen, 0); %frameLen / downFact,

%set files for vowel tracking
helpersDir = 'C:\Users\Public\Documents\software\current-studies\experiment_helpers'; %put path to current-studies/experiment_helpers here

% set audapter params
p = getAudapterDefaultParams(expt.gender); % get default params
% overwrite selected params with experiment-specific values
p.bPitchShift = 1; % This needs to be true if time warping is used ("legacy naming problem")
p.downFact = downFact;
p.sr = sRate / downFact;
p.frameLen = frameLen;
% Feed params to the expt structure 
expt.audapterParams = p; 
% p = add2struct(p,expt.audapterParams); 

% set noise
w = get_noiseSource(p);
Audapter('setParam', 'datapb', w, 1);
p.fb = 3;           % set feedback mode to 3: speech + noise
p.fb3Gain = 0.02; 

%% Initialize audapter
AudapterIO('init', p);

%% run experiment
% setup figures
h_fig = setup_exptFigs;
get_figinds_audapter; % names figs: stim = 1, ctrl = 2, dup = 3;

h_sub = get_subfigs_audapter(h_fig(ctrl),1);

% give instructions and wait for keypress
h_ready = draw_exptText(h_fig,.5,.5,expt.instruct.introtxt,expt.instruct.txtparams);
pause
delete_exptText(h_fig,h_ready)

%% run trials
trials2run = 1:expt.ntrials;
if expt.isRestart
    trials2run = trials2run(trials2run >= expt.startTrial);
end
for itrial = 1:length(trials2run)  % for each trial
    bGoodTrial = 0;
    repeatTrial = 0; 
    while ~bGoodTrial
        % pause if 'p' is pressed
        if get_pause_state(h_fig,'p')
            pause_trial(h_fig);
        end

        % set trial index
        trial_index = trials2run(itrial);

        % plot trial number in experimenter view
        cla(h_sub(1))
        ctrltxt = sprintf('trial: %d/%d, cond: %s',trial_index,expt.ntrials,expt.listConds{trial_index});
        h_trialn = text(h_sub(1),0,0.5,ctrltxt,'Color','black', 'FontSize',30, 'HorizontalAlignment','center');

        % set text
        if length(stimWord) == 1
            txt2display = ['a "' upper(stimWord) '"']; % 
        else
            txt2display = ['a ' upper(stimWord)]; % 
        end
        color2display = expt.colorvals{expt.allColors(trial_index)};
        
        % set new perturbation and durHold
        refreshTimeWarpPCF(dummyWord,'edit','perturb',expt.votPerturb(trial_index),'dur1'); % Edits the working PCF to have the right perturbation for the trial
        refreshTimeWarpPCF(dummyWord,'edit','durHold',expt.durHold(trial_index)); % Edits the working PCF to have the right durHold 
        Audapter('pcf',pcfFN,0) % Feeds the PCF file back into Audapter, with updated perturb value

        % run trial in Audapter
        Audapter('reset'); %reset Audapter
        fprintf('starting trial %d\n',trial_index)
        Audapter('start'); %start trial
        fprintf('Audapter started for trial %d\n',trial_index)
        
        % Sanity checks 
        fprintf('Perturbation is %d\n',expt.votPerturb(trial_index)); % sanity checks 
        fprintf('durHold is %d\n',expt.durHold(trial_index));
        
        % display stimulus
        h_text(1) = draw_exptText(h_fig,.5,.5,txt2display, 'Color',color2display, 'FontSize',stimtxtsize, 'HorizontalAlignment','center');
        pause(expt.timing.stimdur);

        % stop trial in Audapter
        Audapter('stop');
        fprintf('Audapter ended for trial %d\n',trial_index)
        % get data
        data = AudapterIO('getData');

        % plot input spectrogram 
        figure(h_fig(ctrl))
        subplot(h_sub(2))
        show_spectrogram(data.signalIn, data.params.sr, 'noFig');
        tAxis = 0 : p.frameLen : p.frameLen * (size(data.fmts, 1) - 1);
        plot(tAxis/data.params.sr,data.fmts(:, 1 : 2), 'c','LineWidth',3);
        plot(tAxis/data.params.sr,data.sfmts(:, 1 : 2), 'm','LineWidth',1.5);

        %check if good trial 
        bGoodTrial = check_rmsThresh(data,rmsThresh,h_sub(3));
        if expt.bTestMode
            % if you're in test mode, just reassign it to 1
            bGoodTrial = 1; 
        end
            
        % clear screen
        delete_exptText(h_fig,h_text)
        clear h_text

        if bGoodTrial
            % Display PCF status to controller. Only want to do this if they actually talked/etc. 
            [trigSummary,~,warpSummary,~] = timeAdapt_pcfAnalysis(dummyWord,pcfWorking,data.ost_stat); 
            pcftxt = sprintf([trigSummary '\n' warpSummary]);
            h_trialpcf = text(h_sub(1),0,-6,pcftxt,'Color','black', 'FontSize',18, 'HorizontalAlignment','center');
            
            % Repeat and increment repeatTrial if trigger OST didn't happen
            if strcmp(trigSummary,'No trigger')
                repeatTrial = repeatTrial + 1; 
                bGoodTrial = 0; 
                h_text = draw_exptText(h_fig,.5,.2,'Please speak a little more clearly','FontSize',40,'HorizontalAlignment','center','Color','g');
                pause(1)
                delete_exptText(h_fig,h_text)
                clear h_text
            end
            
        elseif ~bGoodTrial
            data.repeatTrial = data.repeatTrial + 1; 
            h_text = draw_exptText(h_fig,.5,.2,'Please speak a little louder','FontSize',40,'HorizontalAlignment','center','Color','y');
            pause(1)
            delete_exptText(h_fig,h_text)
            clear h_text
        end        
        
        data.warpSummary = warpSummary; 
        data.repeatTrial = repeatTrial; 
        % add intertrial interval + jitter
        pause(expt.timing.interstimdur + rand*expt.timing.interstimjitter);

        % save trial
        trialfile = fullfile(trialdir,sprintf('%d.mat',trial_index));
        save(trialfile,'data')

        % clean up data
        clear data
        
    end
    % display break text
    if itrial == length(trials2run)
        breaktext = sprintf('Thank you!\n\nPlease wait.');
        draw_exptText(h_fig,.5,.5,breaktext,expt.instruct.txtparams);
        pause(3);
    elseif any(expt.breakTrials == trial_index)
        breaktext = sprintf('Time for a break!\n%d of %d trials done.\n\nPress the space bar to continue.',itrial,expt.ntrials);
        h_break = draw_exptText(h_fig,.5,.5,breaktext,expt.instruct.txtparams);
        pause
        delete_exptText(h_fig,h_break)
    end
     
end

%% write experiment data and metadata
% collect trials into one variable
alldata = struct;
fprintf('Processing data\n')
for i = 1:trials2run(end)
    load(fullfile(trialdir,sprintf('%d.mat',i)))
    names = fieldnames(data);
    for j = 1:length(names)
        alldata(i).(names{j}) = data.(names{j});
    end
end

% save data
fprintf('Saving data... ')
clear data
data = alldata;
save(fullfile(outputdir,'data.mat'), 'data')
fprintf('saved.\n')

% save expt
fprintf('Saving expt... ')
save(fullfile(outputdir,'expt.mat'), 'expt')
fprintf('saved.\n')

% remove temp trial directory
fprintf('Removing temp directory... ')
rmdir(trialdir,'s');
fprintf('done.\n')

%% close figures
close(h_fig)

%% 

cd 









